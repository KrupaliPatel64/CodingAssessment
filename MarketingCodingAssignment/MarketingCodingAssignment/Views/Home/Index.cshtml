@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <!-- Bootstrap Datepicker CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
   }

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    <script>

        function showLoadingOverlay() {
            $(".loading-overlay").fadeIn();
        }

        function hideLoadingOverlay() {
            $(".loading-overlay").fadeOut();
        }

        // Number of results rows to send back at a time (10).
        var currentPage = 0;
        var rowsPerPage = 10;
        var rowCount = 0;

        // Encode the results
        var $converter = $("<div>");
        function htmlEncode(s) {
            return $converter.text(s).html();
        }

        // If they press the enter key, execute the search
        $("#searchtext").on("keydown", function (e) {
            var currentPage = 0;
            if (e.keyCode == 13) {
                e.preventDefault();
                updateSearchAndResetCount();
            }
        });

        // Initial seach button click (returns the intial set of results).
        $("#searchbutton").on("click", function () {
            updateSearchAndResetCount();
        });

        function updateSearchAndResetCount() {
            currentPage = 0;
            updateSearch();
        }

        $("#durationMinimumFacet, #durationMaximumFacet, #voteAverageMinimumFacet").on("change", function () {
            updateSearchAndResetCount();
        });
        updateSearchAndResetCount();

        function updateSearch() {
            showLoadingOverlay();
            $.ajax({
                type: "get",
                url: "/home/search?searchString=" + encodeURIComponent($("#searchtext").val()) + "&start=" + currentPage + "&rows=" + rowsPerPage + "&isSuggestionSelected=" + isSuggestionSelected,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: {
                    voteAverageMinimum: document.getElementById("voteAverageMinimumFacet").value,
                    durationMinimum: document.getElementById("durationMinimumFacet").value,
                    durationMaximum: document.getElementById("durationMaximumFacet").value,
                    releaseDateFrom: document.getElementById('dateFromFacet').value,
                    releaseDateTo: document.getElementById('dateToFacet').value
                },
                success: function (ajaxResponse) {
                    console.log(ajaxResponse);
                    rowCount = ajaxResponse.searchResults.recordsCount;
                    var startRow = currentPage * rowsPerPage;
                    var calculatedEndRow = (currentPage + 1) * rowsPerPage;
                    var endRow = rowCount < calculatedEndRow ? rowCount : calculatedEndRow;
                    $("#showing-records").empty();
                    $("#showing-records").append("<em>Showing records " + startRow + "  to " + endRow + " out of " + rowCount + " </em>");

                    addResults(0, ajaxResponse.searchResults.films);
                    hideLoadingOverlay();
                    isSuggestionSelected = false;
                },
                failure: function (ajaxResponse) {
                    document.getElementById("errortext").textContent = "Failure! " + ajaxResponse.responseText;
                    isSuggestionSelected = false;
                },
                error: function (ajaxResponse) {
                    document.getElementById("errortext").textContent = "Error! " + ajaxResponse.responseText;
                    isSuggestionSelected = false;
                }
            });
        }

        // Apply formatting and append new results.
        function addResults(start, results) {

            // Array where the search results are stored (in preparation for HTML output).
            var lines = [];
            var resultCount = results.length;
            console.log(results);
            // Loop through the results and format for display.
            for (var i = 0; i < resultCount; ++i) {
                const options = {
                    day: '2-digit',   // Ensures the day is always two digits (e.g., 01, 11)
                    month: 'short',    // Short month name (e.g., Jan, Feb)
                    year: 'numeric'    // Full year (e.g., 1995)
                };
                var item = results[i];
                lines.push("<div class='panel panel-primary'>");
                lines.push("<div class='panel-heading'><div class='panel-title'><a href='https://www.imdb.com/title/" + htmlEncode(item.id) + "'>" + htmlEncode(item.title) + "</a></div></div>");
                lines.push("<div class='panel-body'>");
                if (item.tagline) {
                    lines.push("<div>");
                    if (item.tagline) lines.push("<span class='tagline'><em>" + item.tagline + "</em></span>");

                    lines.push("</div>");
                }

                if (item.runtime || item.revenue || item.VoteAverage || item.releaseDate) {
                    lines.push("<div>");
                    // if (item.tagline && (item.runtime || item.revenue)) lines.push(" | ");
                    if (item.runtime) lines.push("<span class='tagline'> " + convertMinutesToConciseFormat(item.runtime) + "</span>");
                    if (item.runtime && item.revenue) lines.push("<span class='tagline'> | </span>");
                    // if (item.revenue) lines.push("<span class='tagline'>" + item.revenue.toLocaleString("en-US", { style: "currency", currency: "USD" }) + "</span>");
                    if (item.revenue) lines.push("<span class='tagline'>" + formatRevenue(item.revenue) + "</span>");
                    if (item.voteAverage) lines.push("<span class='tagline'> | </span>");
                    if (item.voteAverage) lines.push("<span class='tagline'> " + item.voteAverage + " </span>");
                    if (item.releaseDate) lines.push("<span class='tagline'> | </span>");
                    if (item.releaseDate) lines.push("<span class='tagline'> " + new Date(item.releaseDate).toLocaleDateString('en-GB', options) + "</span>");
                    lines.push("</div>");
                }

                // if (item.releaseDate) lines.push("<div class='tagline'>Initially released " + new Date(item.releaseDate).toLocaleDateString() + "</div>");
                if (item.overview) lines.push("<div class='overview'>" + item.overview + "</div>");
                lines.push("</div>");
                lines.push("</div>");
            }

            $("#searchresults").empty();
            $("#searchresults").append(lines.join(""));

        }

        $("#previous-button").on("click", function () {
            if (currentPage > 0) {
                currentPage--;
                updateSearch();
                $("#nextPage").prop("disabled", false);
            }
            if (currentPage === 1) {
                $("#previousPage").prop("disabled", true);
            }
        });

        $("#next-button").on("click", function () {
            if (rowCount >= (currentPage + 1) * rowsPerPage) {
                currentPage++;
                updateSearch();
                $("#previousPage").prop("disabled", false);
            }
            else {
                $("#nextPage").prop("disabled", true);
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            hideLoadingOverlay();
        }, false);


        function convertMinutesToConciseFormat(totalMinutes) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;

            // Constructing the formatted string
            const hoursString = hours > 0 ? `${hours}h` : '';
            const minutesString = minutes > 0 ? `${minutes}m` : '';

            // Combining hours and minutes, ensuring that we only include non-empty parts
            return [hoursString, minutesString].filter(Boolean).join(' ');
        }

        function formatRevenue(amount) {
            if (amount >= 1_000_000_000) {
                // Format in billions
                return '$' + (amount / 1_000_000_000).toFixed(2) + 'B';
            } else if (amount >= 1_000_000) {
                // Format in millions
                return '$' + (amount / 1_000_000).toFixed(2) + 'M';
            } else if (amount >= 1_000) {
                // Format in thousands
                return '$' + (amount / 1_000).toFixed(2) + 'K';
            } else {
                // Format in original amount if less than 1,000
                return '$' + amount.toString();
            }
        }


        // Auto Complete on search textbox
        function fetchAutocompleteSuggestions(term) {
            // Ensure the term is not empty and is more than 2 characters long
            if (term.length > 2) {
                $.ajax({
                    url: '/autocomplete',
                    type: 'GET',
                    dataType: 'json',
                    data: { term: term },
                    success: function (data) {
                        var suggestions = $('#suggestions');
                        suggestions.empty();
                        suggestions[0].style.visibility = 'visible';
                        if (data.length > 0) {

                            $.each(data, function (index, value) {
                                suggestions.append('<li>' + value + '</li>');
                            });
                        } else {
                            suggestions.append('<li>No suggestions found</li>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching autocomplete suggestions:', error);
                        $('#suggestions').empty().append('<li>Error fetching suggestions</li>');
                    }
                });
            } else {
                $('#suggestions').empty(); // Clear suggestions if input is too short
            }
        }

        $(document).ready(function () {
            $('#searchtext').on('input', function () {
                var term = $(this).val().trim();
                fetchAutocompleteSuggestions(term);
            });

            $("#gearbutton").on("click", function () {
                $("#collapseExp").collapse('toggle');
            });
        });

        var isSuggestionSelected = false;
        $(document).on('click', '#suggestions li', function () {
            var selectedText = $(this).text();
            $('#searchtext').val(selectedText); // Set the selected text in the textbox
            $('#suggestions').empty(); // Hide suggestions list
            $('#suggestions')[0].style.visibility = 'hidden';
            isSuggestionSelected = true;
        });

        // Hide suggestions if clicked outside
        $(document).click(function (event) {
            if (!$(event.target).closest('.autocomplete').length) {
                $('#suggestions').empty(); // Hide suggestions if clicked outside
                $('#suggestions')[0].style.visibility = 'hidden';
            }
        });
    </script>

}

<div class="mainDiv">
    <header class="header">
        <nav class="navbar navbar-expand-lg navbar-toggleable-sm bg-light navbar-light box-shadow">
            @* <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">*@
            <div class="container-fluid title">
                <a class="navbar-brand headerText" asp-area="" asp-controller="Home" asp-action="Index">Film Search</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbar-items"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbar-items">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <a class="nav-link rebuildText" asp-area="" asp-controller="Home" asp-action="ReloadIndex">Rebuild Search Index</a>
                        </li>
                    </ul>

                </div>
            </div>
        </nav>
    </header>
    <div class="searchArea">
        <div class="autocomplete" style="margin-bottom:0px">
            <div class="input-group mb-3" style="width:93%">
                <input id="searchtext" type="search" name="searchtext" placeholder="Type something and press the search button" class="form-control " autocomplete="off">
                <ul id="suggestions" style="visibility:hidden"></ul>

            </div>
            <div class="input-group-append searchBtn">
                <button id="searchbutton" class="btn btn-default " title="Search">
                    <span class="material-symbols-outlined" style="color:#FF4081;font-weight:bold">
                        search
                    </span>
                </button>
            </div>
            <div class="input-group-append gearBtn">
                <button id="gearbutton" class="btn btn-default" title="Advanced Search">
                    <span class="material-symbols-outlined" style="color:#FF4081;font-weight:bold">
                        tune
                    </span>
                </button>
            </div>
        </div>
        <div class="collapse" id="collapseExp">
            <div class="card-body">
                <div style="display:inline-block;">
                    <label for="durationMinimumFacet" class="col-form-label-sm">Duration</label>
                    <select id="durationMinimumFacet" class="form-control form-control-sm" style="display: block; width: 150px">

                        <option value="0">0</option>
                        <option value="30">30</option>
                        <option value="60">60</option>
                        <option value="120">120</option>
                        <option value="180">180</option>
                        <option value="240">240</option>
                    </select>
                </div>

                <div style="display:inline-block;">
                    <label for="dateFromFacet" class="labelFilters">To</label>
                </div>
                <div style="display:inline-block;">
                    @*  <label for="durationMaximumFacet" class="labelFilters">Duration (Max)</label> *@
                    <select id="durationMaximumFacet" class="form-control form-control-sm" style="display: block; width: 150px">
                        <option value="0">0</option>
                        <option value="30">30</option>
                        <option value="60">60</option>
                        <option value="120">120</option>
                        <option value="180">180</option>
                        <option value="240">240</option>
                        <option selected value="1000">1000</option>
                    </select>
                </div>
                <div style="display:inline-block;" class="voteAverage">
                    <label for="voteAverageMinimumFacet" class="col-form-label-sm">Vote Average (Min)</label>
                    <select id="voteAverageMinimumFacet" class="form-control form-control-sm" style="display: block; width: 150px">
                        <option value="0.0">0.0</option>
                        <option value="1.0">1.0</option>
                        <option value="2.0">2.0</option>
                        <option value="3.0">3.0</option>
                        <option value="4.0">4.0</option>
                        <option value="5.0">5.0</option>
                        <option value="6.0">6.0</option>
                        <option value="7.0">7.0</option>
                        <option value="8.0">8.0</option>
                        <option value="9.0">9.0</option>
                        <option value="10.0">10.0</option>
                    </select>
                </div>
                <div style="display:inline-block;">
                    <label for="dateFromFacet" class="col-form-label-sm">Release Date</label>
                    <input type="date" id="dateFromFacet" class="form-control form-control-sm" style="display: block; width: 150px" placeholder="date">
                    <div id="dateFromError" class="error">Please enter a valid date.</div>
                </div>
                <div style="display:inline-block;">
                    <label for="dateFromFacet" class="col-form-label-sm">To</label>
                </div>
                <div style="display:inline-block;">
                    <input type="date" id="dateToFacet" class="form-control form-control-sm" style="display: block; width: 150px" placeholder="date">
                    <div id="dateToError" class="error">Please enter a valid date.</div>
                </div>

            </div>
        </div>
       
        @* <div class="loading-overlay">
        <div class="spinner-border" role="status"></div>
        </div> *@
    </div>

    @* <hr class="divider" /> *@
    <div id="results-count" class="recordsCnt">
        <span>
            <span><button id='previous-button' class='btn btn-default' title='Previous'><span class='material-symbols-outlined'>arrow_back_ios</span></button></span>
            <span id='showing-records'><em>Showing records 0  to 0 out of 0 </em></span>
            <span><button id='next-button' class='btn btn-default' title='Next'><span class='material-symbols-outlined'>arrow_forward_ios</span></button></span>
        </span>

    </div>
    <div><span id="errortext"></span></div>

    <div id="searchresults" style="margin-bottom:55px;"></div>
    <div class="loading-overlay">
        <div class="spinner-border" role="status"></div>
    </div>


</div>
